{"version":3,"sources":["/app/packages/framework/src/email-templates/index.ts"],"sourcesContent":["import { Globals } from \"../globals\";\nimport { RESET_PASSWORD_TEMPLATE } from \"./reset-password\";\nimport { VERIFY_EMAIL_TEMPLATE } from \"./verify-email\";\nimport { generatePasswordResetUrl, generateVerificationUrl } from \"../auth\";\nimport { Config } from \"../AppConfigs\";\nimport { emails } from \"../emails\";\nimport { GlobalNotSetError } from \"../errors\";\n\ninterface templateData {\n  name?: string | null;\n  app_name?: string;\n  link?: string;\n}\n\n/**\n * Renders an email template using EJS.\n * @param {string} template - The EJS template content\n * @param {object} data - The data to be passed to the template\n * @returns {string} - The rendered email template\n */\nexport const renderEmailTemplate = (template: string, data: templateData) => {\n  if (!Config.GADGET_APP_NAME && !data.app_name) {\n    throw new GlobalNotSetError(\"GADGET_APP_NAME is not yet defined\");\n  }\n\n  if (!emails) {\n    throw new GlobalNotSetError(\"emails is not yet defined\");\n  }\n\n  const app_name = data.app_name ?? Config.GADGET_APP_NAME;\n\n  let link;\n  if (template === VERIFY_EMAIL_TEMPLATE) {\n    link = generateVerificationUrl(data.link || \"\").url;\n  } else if (template === RESET_PASSWORD_TEMPLATE) {\n    link = generatePasswordResetUrl(data.link || \"\").url;\n  }\n\n  try {\n    return emails.render(template, { ...data, app_name, link });\n  } catch (error) {\n    Globals.logger.error({ error }, \"[emails] An error occurred rendering your EJS email template\");\n    throw error;\n  }\n};\n\n/**\n * Renders the \"Verify Email\" template.\n * @param {string} [name] - The `name` of the user you wish to address the email to (optional)\n * @param {string} [app_name] - The name of your app, defaults to GADGET_APP_NAME (optional)\n * @param {string} [link] - The link the user has to click in order to verify their account, defaults to GADGET_APP_URL (optional)\n * @returns {string} - The rendered html of the email template\n */\nexport const renderVerifyEmailTemplate = (data: templateData) => {\n  return renderEmailTemplate(VERIFY_EMAIL_TEMPLATE, data);\n};\n\n/**\n * Renders the \"Reset Password\" template.\n * @param {string} [name] - The `name` of the user you wish to address the email to (optional)\n * @param {string} [app_name] - The name of your app, defaults to GADGET_APP_NAME (optional)\n * @param {string} [link] - The link the user has to click in order to reset their password, defaults to GADGET_APP_URL (optional)\n * @returns {string} - The rendered html of the email template\n */\nexport const renderResetPasswordTemplate = (data: templateData) => {\n  return renderEmailTemplate(RESET_PASSWORD_TEMPLATE, data);\n};\n"],"names":["renderEmailTemplate","renderVerifyEmailTemplate","renderResetPasswordTemplate","template","data","Config","GADGET_APP_NAME","app_name","GlobalNotSetError","emails","link","VERIFY_EMAIL_TEMPLATE","generateVerificationUrl","url","RESET_PASSWORD_TEMPLATE","generatePasswordResetUrl","render","error","Globals","logger"],"mappings":";;;;;;;;;;;IAoBaA,mBAAmB;eAAnBA;;IAiCAC,yBAAyB;eAAzBA;;IAWAC,2BAA2B;eAA3BA;;;yBAhEW;+BACgB;6BACF;sBAC4B;4BAC3C;wBACA;wBACW;AAc3B,MAAMF,sBAAsB,CAACG,UAAkBC;IACpD,IAAI,CAACC,kBAAM,CAACC,eAAe,IAAI,CAACF,KAAKG,QAAQ,EAAE;QAC7C,MAAM,IAAIC,yBAAiB,CAAC;IAC9B;IAEA,IAAI,CAACC,cAAM,EAAE;QACX,MAAM,IAAID,yBAAiB,CAAC;IAC9B;IAEA,MAAMD,WAAWH,KAAKG,QAAQ,IAAIF,kBAAM,CAACC,eAAe;IAExD,IAAII;IACJ,IAAIP,aAAaQ,kCAAqB,EAAE;QACtCD,OAAOE,IAAAA,6BAAuB,EAACR,KAAKM,IAAI,IAAI,IAAIG,GAAG;IACrD,OAAO,IAAIV,aAAaW,sCAAuB,EAAE;QAC/CJ,OAAOK,IAAAA,8BAAwB,EAACX,KAAKM,IAAI,IAAI,IAAIG,GAAG;IACtD;IAEA,IAAI;QACF,OAAOJ,cAAM,CAACO,MAAM,CAACb,UAAU;YAAE,GAAGC,IAAI;YAAEG;YAAUG;QAAK;IAC3D,EAAE,OAAOO,OAAO;QACdC,gBAAO,CAACC,MAAM,CAACF,KAAK,CAAC;YAAEA;QAAM,GAAG;QAChC,MAAMA;IACR;AACF;AASO,MAAMhB,4BAA4B,CAACG;IACxC,OAAOJ,oBAAoBW,kCAAqB,EAAEP;AACpD;AASO,MAAMF,8BAA8B,CAACE;IAC1C,OAAOJ,oBAAoBc,sCAAuB,EAAEV;AACtD"}