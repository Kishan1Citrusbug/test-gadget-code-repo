{"version":3,"sources":["/app/packages/framework/src/auth.ts"],"sourcesContent":["import crypto from \"node:crypto\";\nimport { Config } from \"./AppConfigs\";\nimport { GlobalNotSetError } from \"./errors\";\n\n/**\n * Generates a verification url and code\n * @param {string} [customUrl] - The verifcation url for verifying the user for the app (optional)\n * @returns {Object} - An object with the url and code properties\n */\nexport const generateVerificationUrl = (customUrl?: string) => {\n  if (!Config.GADGET_APP_URL && !customUrl) {\n    throw new GlobalNotSetError(\"GADGET_APP_URL is not yet defined\");\n  }\n\n  if (!customUrl) {\n    customUrl = Config.GADGET_APP_URL;\n  }\n\n  const code = generateVerificationCode();\n  const url = new URL(customUrl);\n\n  url.searchParams.append(\"code\", code);\n\n  return {\n    url: url.toString(),\n    code,\n  };\n};\n\nexport const generateVerificationCode = (): string => {\n  return crypto.randomBytes(64).toString(\"hex\");\n};\n\nexport const generatePasswordResetCode = (): string => {\n  return crypto.randomBytes(16).toString(\"hex\");\n};\n\n/**\n * Generates a password reset url and code\n * @param {string} [customUrl] - The password reset url for users to reset their password (optional)\n * @returns {Object} - An object with the url and code properties\n */\nexport const generatePasswordResetUrl = (customUrl?: string) => {\n  if (!Config.GADGET_APP_URL && !customUrl) {\n    throw new GlobalNotSetError(\"GADGET_APP_URL is not yet defined\");\n  }\n\n  if (!customUrl) {\n    customUrl = Config.GADGET_APP_URL;\n  }\n  const code = generatePasswordResetCode();\n  const url = new URL(customUrl);\n\n  url.searchParams.append(\"code\", code);\n\n  return {\n    url: url.toString(),\n    hash: crypto.createHash(\"sha256\").update(code).digest(\"hex\"),\n  };\n};\n\nexport const verifyPasswordResetCode = (code: string, hash: string) => {\n  return crypto.createHash(\"sha256\").update(code).digest(\"hex\") === hash;\n};\n"],"names":["generateVerificationUrl","generateVerificationCode","generatePasswordResetCode","generatePasswordResetUrl","verifyPasswordResetCode","customUrl","Config","GADGET_APP_URL","GlobalNotSetError","code","url","URL","searchParams","append","toString","crypto","randomBytes","hash","createHash","update","digest"],"mappings":";;;;;;;;;;;IASaA,uBAAuB;eAAvBA;;IAoBAC,wBAAwB;eAAxBA;;IAIAC,yBAAyB;eAAzBA;;IASAC,wBAAwB;eAAxBA;;IAmBAC,uBAAuB;eAAvBA;;;;;;;;;;;oEA7DM;;;;;;4BACI;wBACW;AAO3B,MAAMJ,0BAA0B,CAACK;IACtC,IAAI,CAACC,kBAAM,CAACC,cAAc,IAAI,CAACF,WAAW;QACxC,MAAM,IAAIG,yBAAiB,CAAC;IAC9B;IAEA,IAAI,CAACH,WAAW;QACdA,YAAYC,kBAAM,CAACC,cAAc;IACnC;IAEA,MAAME,OAAOR;IACb,MAAMS,MAAM,IAAIC,IAAIN;IAEpBK,IAAIE,YAAY,CAACC,MAAM,CAAC,QAAQJ;IAEhC,OAAO;QACLC,KAAKA,IAAII,QAAQ;QACjBL;IACF;AACF;AAEO,MAAMR,2BAA2B;IACtC,OAAOc,qBAAM,CAACC,WAAW,CAAC,IAAIF,QAAQ,CAAC;AACzC;AAEO,MAAMZ,4BAA4B;IACvC,OAAOa,qBAAM,CAACC,WAAW,CAAC,IAAIF,QAAQ,CAAC;AACzC;AAOO,MAAMX,2BAA2B,CAACE;IACvC,IAAI,CAACC,kBAAM,CAACC,cAAc,IAAI,CAACF,WAAW;QACxC,MAAM,IAAIG,yBAAiB,CAAC;IAC9B;IAEA,IAAI,CAACH,WAAW;QACdA,YAAYC,kBAAM,CAACC,cAAc;IACnC;IACA,MAAME,OAAOP;IACb,MAAMQ,MAAM,IAAIC,IAAIN;IAEpBK,IAAIE,YAAY,CAACC,MAAM,CAAC,QAAQJ;IAEhC,OAAO;QACLC,KAAKA,IAAII,QAAQ;QACjBG,MAAMF,qBAAM,CAACG,UAAU,CAAC,UAAUC,MAAM,CAACV,MAAMW,MAAM,CAAC;IACxD;AACF;AAEO,MAAMhB,0BAA0B,CAACK,MAAcQ;IACpD,OAAOF,qBAAM,CAACG,UAAU,CAAC,UAAUC,MAAM,CAACV,MAAMW,MAAM,CAAC,WAAWH;AACpE"}