{
  "version": 3,
  "sources": ["../../src/models/Gadgemon.ts"],
  "sourcesContent": ["import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  DefaultSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n  Select,\n  DeepFilterNever,\n      Gadgemon,\n      GadgemonSort,\n      GadgemonFilter,\n      AvailableGadgemonSelection,\n      CreateGadgemonInput,\n      UpdateGadgemonInput,\n      BulkDeleteGadgemonsResult,\n  \n} from \"../types.js\";\n\nimport { disambiguateActionParams } from \"../support.js\";\n\nexport const DefaultGadgemonSelection = {\n  \"__typename\": true,\n  \"createdAt\": true,\n  \"id\": true,\n  \"name\": true,\n  \"similar\": true,\n  \"sprite\": {\n    \"mimeType\": true,\n    \"url\": true\n  },\n  \"type\": true,\n  \"updatedAt\": true\n} as const;\n\n/**\n* Produce a type that holds only the selected fields (and nested fields) of \"gadgemon\". The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedGadgemonOrDefault<Options extends Selectable<AvailableGadgemonSelection>> = DeepFilterNever<\n  Select<\n    Gadgemon,\n    DefaultSelection<\n      AvailableGadgemonSelection,\n      Options,\n      typeof DefaultGadgemonSelection\n    >\n  >>;\n\n/** Options that can be passed to the `GadgemonManager#findOne` method */\nexport interface FindOneGadgemonOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableGadgemonSelection;\n};\n\n\n/** Options that can be passed to the `GadgemonManager#maybeFindOne` method */\nexport interface MaybeFindOneGadgemonOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableGadgemonSelection;\n};\n\n\n/** Options that can be passed to the `GadgemonManager#findMany` method */\nexport interface FindManyGadgemonsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableGadgemonSelection;\n  /** Return records sorted by these sorts */\n  sort?: GadgemonSort | GadgemonSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: GadgemonFilter | GadgemonFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n\n\n/** Options that can be passed to the `GadgemonManager#findFirst` method */\nexport interface FindFirstGadgemonOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableGadgemonSelection;\n  /** Return records sorted by these sorts */\n  sort?: GadgemonSort | GadgemonSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: GadgemonFilter | GadgemonFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n\n/** Options that can be passed to the `GadgemonManager#maybeFindFirst` method */\nexport interface MaybeFindFirstGadgemonOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableGadgemonSelection;\n  /** Return records sorted by these sorts */\n  sort?: GadgemonSort | GadgemonSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: GadgemonFilter | GadgemonFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n\n\nexport interface CreateGadgemonOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableGadgemonSelection;\n};\n\n\n\nexport interface UpdateGadgemonOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableGadgemonSelection;\n};\n\n\n\nexport interface DeleteGadgemonOptions {\n};\n\n\n\n\n    \n  export type FullyQualifiedCreateGadgemonVariables = {\n          gadgemon?: CreateGadgemonInput,\n      }\n\n\n    export type CreateGadgemonVariables = CreateGadgemonInput;\n\n\n\ntype createGadgemonActionReturnType<Options extends CreateGadgemonOptions> = Promise<\n\n  SelectedGadgemonOrDefault<Options> extends void ? void : GadgetRecord<SelectedGadgemonOrDefault<Options>>\n\n>\n\n/**\n  * Executes the create action. Accepts the parameters for the action via the `variables` argument. Runs the action and returns a Promise for the updated record.\n  */\n\n// Flat style overload\nasync function createGadgemon<Options extends CreateGadgemonOptions>(\n  \n    variables: CreateGadgemonVariables,\n\n  options?: LimitToKnownKeys<Options, CreateGadgemonOptions>\n): createGadgemonActionReturnType<Options>\n\n// Fully qualified, nested api identifier overload\nasync function createGadgemon<Options extends CreateGadgemonOptions>(\n  \n      variables: FullyQualifiedCreateGadgemonVariables,\n  \n  options?: LimitToKnownKeys<Options, CreateGadgemonOptions>\n): createGadgemonActionReturnType<Options>;\n\n// Function implementation\nasync function createGadgemon<Options extends CreateGadgemonOptions>(\n  this: GadgemonManager,\n  \n      variables: CreateGadgemonVariables | FullyQualifiedCreateGadgemonVariables,\n  \n  options?: LimitToKnownKeys<Options, CreateGadgemonOptions>\n): Promise<SelectedGadgemonOrDefault<Options> extends void ? void : GadgetRecord<SelectedGadgemonOrDefault<Options>>>\n {\n    const newVariables = disambiguateActionParams(\n      this[\"create\"],\n       undefined,\n      variables);\n\n  return (await actionRunner<SelectedGadgemonOrDefault<Options>>(\n    this,\n    \"createGadgemon\",\n    DefaultGadgemonSelection,\n    \"gadgemon\",\n    \"gadgemon\",\n    false,\n    {\n                    \"gadgemon\": {\n          value: newVariables.gadgemon,\n          required: false,\n          type: \"CreateGadgemonInput\",\n        },\n          },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n    \n  export type FullyQualifiedUpdateGadgemonVariables = {\n          gadgemon?: UpdateGadgemonInput,\n      }\n\n\n    export type UpdateGadgemonVariables = UpdateGadgemonInput;\n\n\n\ntype updateGadgemonActionReturnType<Options extends UpdateGadgemonOptions> = Promise<\n\n  SelectedGadgemonOrDefault<Options> extends void ? void : GadgetRecord<SelectedGadgemonOrDefault<Options>>\n\n>\n\n/**\n  * Executes the update action on one record specified by `id`. Runs the action and returns a Promise for the updated record.\n  */\n\n// Flat style overload\nasync function updateGadgemon<Options extends UpdateGadgemonOptions>(\n  id: string,\n    variables: UpdateGadgemonVariables,\n\n  options?: LimitToKnownKeys<Options, UpdateGadgemonOptions>\n): updateGadgemonActionReturnType<Options>\n\n// Fully qualified, nested api identifier overload\nasync function updateGadgemon<Options extends UpdateGadgemonOptions>(\n  id: string,\n      variables: FullyQualifiedUpdateGadgemonVariables,\n  \n  options?: LimitToKnownKeys<Options, UpdateGadgemonOptions>\n): updateGadgemonActionReturnType<Options>;\n\n// Function implementation\nasync function updateGadgemon<Options extends UpdateGadgemonOptions>(\n  this: GadgemonManager,\n  id: string,\n      variables: UpdateGadgemonVariables | FullyQualifiedUpdateGadgemonVariables,\n  \n  options?: LimitToKnownKeys<Options, UpdateGadgemonOptions>\n): Promise<SelectedGadgemonOrDefault<Options> extends void ? void : GadgetRecord<SelectedGadgemonOrDefault<Options>>>\n {\n    const newVariables = disambiguateActionParams(\n      this[\"update\"],\n       id,\n      variables);\n\n  return (await actionRunner<SelectedGadgemonOrDefault<Options>>(\n    this,\n    \"updateGadgemon\",\n    DefaultGadgemonSelection,\n    \"gadgemon\",\n    \"gadgemon\",\n    false,\n    {\n              id: {\n          value: id,\n          required: true,\n          type: \"GadgetID\",\n        },\n                    \"gadgemon\": {\n          value: newVariables.gadgemon,\n          required: false,\n          type: \"UpdateGadgemonInput\",\n        },\n          },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n    \n\ntype deleteGadgemonActionReturnType<Options extends DeleteGadgemonOptions> = Promise<\n\n  void extends void ? void : GadgetRecord<SelectedGadgemonOrDefault<Options>>\n\n>\n\n/**\n  * Executes the delete action on one record specified by `id`. Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n  */\n\n// Fully qualified, nested api identifier overload\nasync function deleteGadgemon<Options extends DeleteGadgemonOptions>(\n  id: string,\n  \n  options?: LimitToKnownKeys<Options, DeleteGadgemonOptions>\n): deleteGadgemonActionReturnType<Options>;\n\n// Function implementation\nasync function deleteGadgemon<Options extends DeleteGadgemonOptions>(\n  this: GadgemonManager,\n  id: string,\n  \n  options?: LimitToKnownKeys<Options, DeleteGadgemonOptions>\n): Promise<void extends void ? void : GadgetRecord<SelectedGadgemonOrDefault<Options>>>\n {\n\n  return (await actionRunner<void>(\n    this,\n    \"deleteGadgemon\",\n    null,\n    \"gadgemon\",\n    \"gadgemon\",\n    false,\n    {\n              id: {\n          value: id,\n          required: true,\n          type: \"GadgetID\",\n        },\n                },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n\n/** All the actions available at the collection level and record level for \"gadgemon\" */\nexport class GadgemonManager {\n  constructor(readonly connection: GadgetConnection) {}\n\n  \n    /**\n * Finds one gadgemon by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nfindOne: {\n  <Options extends FindOneGadgemonOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneGadgemonOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedGadgemonOrDefault<Options>\n      >\n    >;\n  type: \"findOne\",\n  findByVariableName: \"id\";\n  operationName: \"gadgemon\";\n  modelApiIdentifier: \"gadgemon\";\n  defaultSelection: typeof DefaultGadgemonSelection;\n  selectionType: AvailableGadgemonSelection;\n  optionsType: FindOneGadgemonOptions;\n  schemaType: Query[\"gadgemon\"];\n} = Object.assign(\n  async <Options extends FindOneGadgemonOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneGadgemonOptions>) => {\n    return await findOneRunner<SelectedGadgemonOrDefault<Options>>(\n      this,\n      \"gadgemon\",\n      id,\n      DefaultGadgemonSelection,\n      \"gadgemon\",\n      options\n    );\n  },\n  {\n    type: \"findOne\",\n    findByVariableName: \"id\",\n    operationName: \"gadgemon\",\n    modelApiIdentifier: \"gadgemon\",\n    defaultSelection: DefaultGadgemonSelection,\n    selectionType: {} as AvailableGadgemonSelection,\n    optionsType: {} as FindOneGadgemonOptions,\n    schemaType: null as Query[\"gadgemon\"],\n  } as const\n)\n\n  \n    /**\n * Finds one gadgemon by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nmaybeFindOne: {\n  <Options extends MaybeFindOneGadgemonOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneGadgemonOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedGadgemonOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindOne\";\n  findByVariableName: \"id\";\n  operationName: \"gadgemon\";\n  modelApiIdentifier: \"gadgemon\";\n  defaultSelection: typeof DefaultGadgemonSelection;\n  selectionType: AvailableGadgemonSelection;\n  optionsType: MaybeFindOneGadgemonOptions;\n  schemaType: Query[\"gadgemon\"];\n} = Object.assign(\n  async <Options extends MaybeFindOneGadgemonOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneGadgemonOptions>) => {\n    const record = await findOneRunner<SelectedGadgemonOrDefault<Options>>(\n      this,\n      \"gadgemon\",\n      id,\n      DefaultGadgemonSelection,\n      \"gadgemon\",\n      options,\n      false\n    );\n    return record.isEmpty() ? null : record;\n  },\n  {\n    type: \"maybeFindOne\",\n    findByVariableName: \"id\",\n    operationName: \"gadgemon\",\n    modelApiIdentifier: \"gadgemon\",\n    defaultSelection: DefaultGadgemonSelection,\n    selectionType: {} as AvailableGadgemonSelection,\n    optionsType: {} as MaybeFindOneGadgemonOptions,\n    schemaType: null as Query[\"gadgemon\"],\n  } as const\n)\n\n  \n    /**\n * Finds many gadgemon. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindMany: {\n  <Options extends FindManyGadgemonsOptions>(options?: LimitToKnownKeys<Options, FindManyGadgemonsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedGadgemonOrDefault<Options>\n      >\n    >;\n  type: \"findMany\";\n  operationName: \"gadgemons\";\n  modelApiIdentifier: \"gadgemon\";\n  defaultSelection: typeof DefaultGadgemonSelection;\n  selectionType: AvailableGadgemonSelection;\n  optionsType: FindManyGadgemonsOptions;\n  schemaType: Query[\"gadgemon\"];\n} = Object.assign(\n  async <Options extends FindManyGadgemonsOptions>(options?: LimitToKnownKeys<Options, FindManyGadgemonsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedGadgemonOrDefault<Options>\n      >\n    > =>\n  {\n    return await findManyRunner<SelectedGadgemonOrDefault<Options>>(\n      this,\n      \"gadgemons\",\n      DefaultGadgemonSelection,\n      \"gadgemon\",\n      options\n    );\n  },\n  {\n    type: \"findMany\",\n    operationName: \"gadgemons\",\n    modelApiIdentifier: \"gadgemon\",\n    defaultSelection: DefaultGadgemonSelection,\n    selectionType: {} as AvailableGadgemonSelection,\n    optionsType: {} as FindManyGadgemonsOptions,\n    schemaType: null as Query[\"gadgemon\"],\n  } as const\n);\n  \n    /**\n * Finds the first matching gadgemon. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindFirst: {\n  <Options extends FindFirstGadgemonOptions>(options?: LimitToKnownKeys<Options, FindFirstGadgemonOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedGadgemonOrDefault<Options>\n      >\n    >;\n  type: \"findFirst\";\n  operationName: \"gadgemons\";\n  modelApiIdentifier: \"gadgemon\";\n  defaultSelection: typeof DefaultGadgemonSelection;\n  selectionType: AvailableGadgemonSelection;\n  optionsType: FindFirstGadgemonOptions;\n  schemaType: Query[\"gadgemon\"];\n} = Object.assign(\n  async <Options extends FindFirstGadgemonOptions>(options?: LimitToKnownKeys<Options, FindFirstGadgemonOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedGadgemonOrDefault<Options>\n      >\n    > =>\n  {\n    const list = await findManyRunner<SelectedGadgemonOrDefault<Options>>(\n      this,\n      \"gadgemons\",\n      DefaultGadgemonSelection,\n      \"gadgemon\",\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      true\n    );\n    return list[0];\n  },\n  {\n    type: \"findFirst\",\n    operationName: \"gadgemons\",\n    modelApiIdentifier: \"gadgemon\",\n    defaultSelection: DefaultGadgemonSelection,\n    selectionType: {} as AvailableGadgemonSelection,\n    optionsType: {} as FindFirstGadgemonOptions,\n    schemaType: null as Query[\"gadgemon\"],\n  } as const\n);\n  \n    /**\n * Finds the first matching gadgemon. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n **/\nmaybeFindFirst: {\n  <Options extends MaybeFindFirstGadgemonOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstGadgemonOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedGadgemonOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindFirst\";\n  operationName: \"gadgemons\";\n  modelApiIdentifier: \"gadgemon\";\n  defaultSelection: typeof DefaultGadgemonSelection;\n  selectionType: AvailableGadgemonSelection;\n  optionsType: MaybeFindFirstGadgemonOptions;\n  schemaType: Query[\"gadgemon\"];\n} = Object.assign(\n  async <Options extends MaybeFindFirstGadgemonOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstGadgemonOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedGadgemonOrDefault<Options>\n      > | null\n    > =>\n  {\n    const list = await findManyRunner<SelectedGadgemonOrDefault<Options>>(\n      this,\n      \"gadgemons\",\n      DefaultGadgemonSelection,\n      \"gadgemon\",\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      false\n    );\n    return list?.[0] ?? null;\n  },\n  {\n    type: \"maybeFindFirst\",\n    operationName: \"gadgemons\",\n    modelApiIdentifier: \"gadgemon\",\n    defaultSelection: DefaultGadgemonSelection,\n    selectionType: {} as AvailableGadgemonSelection,\n    optionsType: {} as MaybeFindFirstGadgemonOptions,\n    schemaType: null as Query[\"gadgemon\"],\n  } as const\n);\n  \n    /**\n  * Finds one gadgemon by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n  **/\nfindById: {\n  <Options extends FindOneGadgemonOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneGadgemonOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedGadgemonOrDefault<Options>\n      >\n    >;\n  type: \"findOne\";\n  findByVariableName: \"id\";\n  operationName: \"gadgemons\";\n  modelApiIdentifier: \"gadgemon\";\n  defaultSelection: typeof DefaultGadgemonSelection;\n  selectionType: AvailableGadgemonSelection;\n  optionsType: FindOneGadgemonOptions;\n  schemaType: Query[\"gadgemon\"];\n} = Object.assign(\n  async <Options extends FindOneGadgemonOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneGadgemonOptions>):\n    Promise<\n      GadgetRecordImplementation<\n        SelectedGadgemonOrDefault<Options>\n      > & SelectedGadgemonOrDefault<Options>\n    > =>\n  {\n    return await findOneByFieldRunner<SelectedGadgemonOrDefault<Options>>(\n      this,\n      \"gadgemons\",\n      \"id\",\n      value,\n      DefaultGadgemonSelection,\n      \"gadgemon\",\n      options\n    );\n  },\n  {\n    type: \"findOne\",\n    findByVariableName: \"id\",\n    operationName: \"gadgemons\",\n    modelApiIdentifier: \"gadgemon\",\n    defaultSelection: DefaultGadgemonSelection,\n    selectionType: {} as AvailableGadgemonSelection,\n    optionsType: {} as FindOneGadgemonOptions,\n    schemaType: null as Query[\"gadgemon\"],\n  } as const\n)\n  \n    create = Object.assign(createGadgemon,\n  {\n    type: \"action\",\n    operationName: \"createGadgemon\",\n    namespace: null,\n    modelApiIdentifier: \"gadgemon\",\n    modelSelectionField: \"gadgemon\",\n    isBulk: false,\n    defaultSelection: DefaultGadgemonSelection,\n    selectionType: {} as AvailableGadgemonSelection,\n    optionsType: {} as CreateGadgemonOptions,\n    schemaType: null as Query[\"gadgemon\"],\n\n    variablesType: undefined as\n      (\n      (\n        FullyQualifiedCreateGadgemonVariables          | CreateGadgemonVariables      )\n    ) | undefined,\n\n    variables: {\n      \"gadgemon\": {\n        required: false,\n        type: \"CreateGadgemonInput\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: true,\n  } as const\n)\n\n  \n    update = Object.assign(updateGadgemon,\n  {\n    type: \"action\",\n    operationName: \"updateGadgemon\",\n    namespace: null,\n    modelApiIdentifier: \"gadgemon\",\n    modelSelectionField: \"gadgemon\",\n    isBulk: false,\n    defaultSelection: DefaultGadgemonSelection,\n    selectionType: {} as AvailableGadgemonSelection,\n    optionsType: {} as UpdateGadgemonOptions,\n    schemaType: null as Query[\"gadgemon\"],\n\n    variablesType: undefined as\n      (        { id: string } &\n\n      (\n        FullyQualifiedUpdateGadgemonVariables          | UpdateGadgemonVariables      )\n    ) | undefined,\n\n    variables: {\n      id: {\n        required: true,\n        type: \"GadgetID\",\n      },\n      \"gadgemon\": {\n        required: false,\n        type: \"UpdateGadgemonInput\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: true,\n  } as const\n)\n\n  \n    delete = Object.assign(deleteGadgemon,\n  {\n    type: \"action\",\n    operationName: \"deleteGadgemon\",\n    namespace: null,\n    modelApiIdentifier: \"gadgemon\",\n    modelSelectionField: \"gadgemon\",\n    isBulk: false,\n    defaultSelection: null,\n    selectionType: {} as Record<string, never>,\n    optionsType: {} as DeleteGadgemonOptions,\n    schemaType: null,\n\n    variablesType: undefined as\n      (        { id: string } &\n\n        {}\n    ) | undefined,\n\n    variables: {\n      id: {\n        required: true,\n        type: \"GadgetID\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: false,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: false,\n  } as const\n)\n\n  \n    /**\n  * Executes the bulkDelete action on all records specified by `ids`. Deletes the records on the server.\n  */\nbulkDelete: {\n  <Options extends DeleteGadgemonOptions>(\n    ids: string[],\n    options?: LimitToKnownKeys<Options, DeleteGadgemonOptions>\n  ): Promise<void>;\n  type: \"action\";\n  operationName: \"bulkDeleteGadgemons\";\n  namespace: null;\n  modelApiIdentifier: \"gadgemon\";\n  modelSelectionField: \"gadgemons\";\n  isBulk: true;\n  defaultSelection: null;\n  selectionType: Record<string, never>;\n  optionsType: DeleteGadgemonOptions;\n  schemaType: null;\n  variablesType: {\n    ids: string[];\n  } | undefined;\n  variables: {\n    ids: {\n      required: true;\n      type: \"[GadgetID!]\";\n    };\n  };\n  hasReturnType: boolean;\n} = Object.assign(\n  async <Options extends DeleteGadgemonOptions>(\n    ids: string[],\n    options?: LimitToKnownKeys<Options, DeleteGadgemonOptions>\n  ) => {\n    return (await actionRunner<void>(\n      this,\n      \"bulkDeleteGadgemons\",\n      null,\n      \"gadgemon\",\n      \"gadgemons\",\n      true,\n      {\n        ids: {\n          value: ids,\n          required: true,\n          type: \"[GadgetID!]\",\n        },\n      },\n      options,\n      null,\n      false\n    ));\n  },\n  {\n    type: \"action\",\n    operationName: \"bulkDeleteGadgemons\",\n    namespace: null,\n    modelApiIdentifier: \"gadgemon\",\n    modelSelectionField: \"gadgemons\",\n    isBulk: true,\n    defaultSelection: null,\n    selectionType: {} as Record<string, never>,\n    optionsType: {} as DeleteGadgemonOptions,\n    schemaType: null,\n\n    variablesType: undefined as {\n      ids: string[]\n    } | undefined,\n\n    variables: {\n      ids: {\n        required: true,\n        type: \"[GadgetID!]\",\n      },\n    },\n    hasReturnType: false,\n  } as const\n)\n  \n}\n"],
  "mappings": "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",
  "names": []
}
